// Generated by gencpp from file neuromechanics_control/Spike.msg
// DO NOT EDIT!


#ifndef NEUROMECHANICS_CONTROL_MESSAGE_SPIKE_H
#define NEUROMECHANICS_CONTROL_MESSAGE_SPIKE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neuromechanics_control
{
template <class ContainerAllocator>
struct Spike_
{
  typedef Spike_<ContainerAllocator> Type;

  Spike_()
    : neuron_index(0)
    , time(0.0)  {
    }
  Spike_(const ContainerAllocator& _alloc)
    : neuron_index(0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _neuron_index_type;
  _neuron_index_type neuron_index;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::neuromechanics_control::Spike_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neuromechanics_control::Spike_<ContainerAllocator> const> ConstPtr;

}; // struct Spike_

typedef ::neuromechanics_control::Spike_<std::allocator<void> > Spike;

typedef boost::shared_ptr< ::neuromechanics_control::Spike > SpikePtr;
typedef boost::shared_ptr< ::neuromechanics_control::Spike const> SpikeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neuromechanics_control::Spike_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neuromechanics_control::Spike_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace neuromechanics_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'neuromechanics_control': ['/home/baxter/git_repos/NeuromechanicsControl/ROS-packages/control/src/neuromechanics_control/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::neuromechanics_control::Spike_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neuromechanics_control::Spike_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neuromechanics_control::Spike_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neuromechanics_control::Spike_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neuromechanics_control::Spike_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neuromechanics_control::Spike_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neuromechanics_control::Spike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffb331888bb7ffb461985148bcf50fd8";
  }

  static const char* value(const ::neuromechanics_control::Spike_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffb331888bb7ffb4ULL;
  static const uint64_t static_value2 = 0x61985148bcf50fd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::neuromechanics_control::Spike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neuromechanics_control/Spike";
  }

  static const char* value(const ::neuromechanics_control::Spike_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neuromechanics_control::Spike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 neuron_index\n\
float64 time\n\
";
  }

  static const char* value(const ::neuromechanics_control::Spike_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neuromechanics_control::Spike_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.neuron_index);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Spike_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neuromechanics_control::Spike_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neuromechanics_control::Spike_<ContainerAllocator>& v)
  {
    s << indent << "neuron_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.neuron_index);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEUROMECHANICS_CONTROL_MESSAGE_SPIKE_H
